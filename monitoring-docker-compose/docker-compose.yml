####################################################################################################
# !!!!!!!! AIMS docker compose for multiple portal containers !!!!!!!!
####################################################################################################
# history descriptions
# 2022-08-08 | initial docker-compose version for multiple portal containers.
####################################################################################################
# docker --version
# Docker version 20.10.17
# docker-compose -v
# Docker Compose version v2.9.0
#
# - about docker-compose.yml config file..
# docker-compose.yml common configuration => .env file
#
# - about docker-compose command line descriptions.
### when initial start 
# => $ docker-compose up -d
### when check docker-compose process info.
# => $ docker-compose ps
### when shutdown(!!! Removes all data from the docker container. except host's folders & files !!) 
# => $ docker-compose up -d
### when stop for a while.
# => $ docker-compose stop
### when Resume stopped state.
# => $ docker-compose start
### when tailing docker-compose logs 
# => $ docker-compose logs -t -f aims-portal
# => $ docker-compose logs -t -f docker-aims-portal-image-1
# => $ docker-compose logs -t -f aims-core
### when get container info
# => $ docker container ls -a
### when managements in docker container shell directly
# => $ docker exec -it ${CONTAINER ID} /bin/sh
### when show docker container cpu/memory usage
# => docker stats
#
# - dashboard container nginx path
#   /etc/nginx
#   /usr/share/nginx/html/
#
# $ docker-compose ps
#NAME                IMAGE                             COMMAND                  SERVICE             CREATED             STATUS                       PORTS
#cadvisor            gcr.io/cadvisor/cadvisor:latest   "/usr/bin/cadvisor -…"   cadvisor            About an hour ago   Up About an hour (healthy)   0.0.0.0:8080->8080/tcp
#grafana             grafana/grafana:latest            "/run.sh"                grafana             About an hour ago   Up About an hour (healthy)   0.0.0.0:3000->3000/tcp
#node-exporter       prom/node-exporter:v1.5.0         "/bin/node_exporter"     node-exporter       About an hour ago   Up About an hour (healthy)   0.0.0.0:9100->9100/tcp
#pgadmin4            dpage/pgadmin4                    "/entrypoint.sh"         pgadmin4            About an hour ago   Up About an hour (healthy)   443/tcp, 0.0.0.0:9980->80/tcp
#prometheus          prom/prometheus:latest            "/bin/prometheus --c…"   prometheus          About an hour ago   Up About an hour (healthy)   0.0.0.0:9090->9090/tcp
#
####################################################################################################
version: "3.5" # deploy.replicas option is enabled in compose file.
services:
  ####################################################################################################
  # prometheus for monitoring data stored.
  prometheus:
    image: ${PROMETHEUS_IMG_PATH}
    container_name: prometheus
    profiles: [ "prometheus" ]
    #user: root    #it can be changed when using hosts volume
    restart: always
    environment:
      TZ: ${AIMS_TZ}
    ports:
      - "9090:9090"
    healthcheck:
      test: ${HEALTHCHECK_TEST}:9090/graph/ || exit 1
      interval: ${HEALTHCHECK_INTERVAL}
      start_period: ${HEALTHCHECK_START_PERIOD}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: 3
    command:
      #- '--web.listen-address=0.0.0.0:9099'
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_DATE}' #Defaults to 15d
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - aims-net-monitor

  ####################################################################################################
  # grafana for monitoring graphs.
  grafana:
    image: ${GRAFANA_IMG_PATH}
    container_name: grafana
    profiles: [ "grafana" ]
    #user: root    #it can be changed when using hosts volume
    restart: unless-stopped
    environment:
      TZ: ${AIMS_TZ}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana.ini:/etc/grafana/grafana.ini
    ports:
      - 3000:3000
    healthcheck:
      test: ${HEALTHCHECK_TEST}:3000/ || exit 1
      interval: ${HEALTHCHECK_INTERVAL}
      start_period: ${HEALTHCHECK_START_PERIOD}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: 3
    depends_on:
      - prometheus
    networks:
      - aims-net-monitor

  ####################################################################################################
  # pgadmin4 web for sql queries.
  pgadmin4:
    image: ${PGADMIN_IMG_PATH}
    container_name: pgadmin4
    profiles: [ "pgadmin4" ]
    restart: unless-stopped
    ports:
      - 9980:80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_ADDRESS: 0.0.0.0
      PGADMIN_LISTEN_PORT: 80
      TZ: ${AIMS_TZ}
    healthcheck:
      test: ${HEALTHCHECK_TEST}:80/ || exit 1
      interval: ${HEALTHCHECK_INTERVAL}
      start_period: ${HEALTHCHECK_START_PERIOD}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: 3
    networks:
      - aims-net-monitor

  ####################################################################################################
  # node_exporter [OPTIONAL] for resource monitoring.
  node-exporter:
    image: ${NODE_EXPORTER_IMG_PATH}
    container_name: node-exporter
    restart: unless-stopped
    profiles: [ "node-exporter" ]
    expose:
      - 9100
    ports:
      - "9100:9100"
    healthcheck:
      test: ${HEALTHCHECK_TEST}:9100/metric/ || exit 1
      interval: ${HEALTHCHECK_INTERVAL}
      start_period: ${HEALTHCHECK_START_PERIOD}
      timeout: ${HEALTHCHECK_TIMEOUT}
      retries: 3
    networks:
      - aims-net-monitor

  ####################################################################################################
  # cadvisor [OPTIONAL] for container monitoring.
  cadvisor:
    image: ${CADVISOR_IMG_PATH}
    container_name: cadvisor
    restart: unless-stopped
    profiles: [ "cadvisor" ]
    privileged: true
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro. # in ubuntu
      #- /var/run/docker.sock:/var/run/docker.sock:rw. # in mac
    networks:
      - aims-net-monitor

####################################################################################################
# AIMS network & volumes creation
networks:
  aims-net-monitor:
    driver: bridge
volumes:
  prometheus_data: {}
  grafana_data: {}
  pgadmin_data: {}

####################################################################################################
